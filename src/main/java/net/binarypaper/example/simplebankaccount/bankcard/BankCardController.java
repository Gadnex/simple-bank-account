package net.binarypaper.example.simplebankaccount.bankcard;

import java.util.List;
import java.util.Optional;
import java.util.Properties;

import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;

import com.fasterxml.jackson.annotation.JsonView;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.transaction.Transactional;
import net.binarypaper.example.simplebankaccount.account.Account;
import net.binarypaper.example.simplebankaccount.account.AccountController;
import net.binarypaper.example.simplebankaccount.utils.ClasspathProperties;
import net.binarypaper.example.simplebankaccount.utils.DataIntegrityViolationExceptionHandler;

@RestController
@RequestMapping(path = "accounts/{account-id}/cards", produces = { MediaType.APPLICATION_JSON_VALUE })
@CrossOrigin(origins = { "${application.cors.origins}" })
@Tag(name = "Bank Card API", description = "Manage bank cards per bank account")
public class BankCardController {

    private final AccountController accountController;

    private final BankCardRepository bankCardRepository;

    private final Properties errorMessageProperties;

    private final DataIntegrityViolationExceptionHandler dataIntegrityViolationExceptionHandler;

    public BankCardController(AccountController accountController, BankCardRepository bankCardRepository) {
        this.accountController = accountController;
        this.bankCardRepository = bankCardRepository;
        errorMessageProperties = ClasspathProperties.load("ErrorMessages.properties");
        dataIntegrityViolationExceptionHandler = new DataIntegrityViolationExceptionHandler(errorMessageProperties);
        dataIntegrityViolationExceptionHandler.addConstraintValidation("UC_BANK_CARD_NUMBER", "{ERR002}");
    }

    @GetMapping
    @JsonView(BankCard.Views.List.class)
    @Operation(summary = "Get a list of all bank cards for an account", description = "Get a list of all bank cards for an account sorted by card number")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "List of bank cards returned"),
            @ApiResponse(responseCode = "404", description = "Invalid account id", content = @Content)
    })
    public List<BankCard> getAllBankCardsByAccountId(
            @PathVariable(name = "account-id") @Parameter(description = "The account id to find", example = "1") Long accountId) {
        // Used to validate if accountId exists
        accountController.getAccountById(accountId);
        return bankCardRepository.findByAccountIdOrderByNumber(accountId);
    }

    @GetMapping("{bank-card-id}")
    @JsonView(BankCard.Views.List.class)
    @Operation(summary = "Get a bank card for an account", description = "Get a bank card for an account by account id and bank card id")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Bank card returned"),
            @ApiResponse(responseCode = "404", description = "Invalid account id and bank card id", content = @Content)
    })
    public BankCard getBankCardByAccountIdAndBankCardId(
            @PathVariable(name = "account-id") @Parameter(description = "The account id to find", example = "1") Long accountId,
            @PathVariable(name = "bank-card-id") @Parameter(description = "The bank card id to find", example = "1") Long bankCardId) {
        Optional<BankCard> bankCard = bankCardRepository.findByAccountIdAndId(accountId, bankCardId);
        if (bankCard.isEmpty()) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Invalid account id and bank card id");
        }
        return bankCard.get();
    }

    @PostMapping
    @ResponseStatus(HttpStatus.CREATED)
    @Transactional
    @JsonView(BankCard.Views.View.class)
    @Operation(summary = "Create a new bank card", description = "Create a new bank card. The unique bank card id will be generated by the system.")
    @ApiResponses({
            @ApiResponse(responseCode = "201", description = "The bank card was created"),
            @ApiResponse(responseCode = "400", description = "Invalid bank card details", content = @Content)
    })
    public BankCard createBankCard(
            @PathVariable(name = "account-id") @Parameter(description = "The account id to find", example = "1") Long accountId,
            @RequestBody @Validated(BankCard.Views.Create.class) @JsonView(BankCard.Views.Create.class) BankCard bankCard) {
        Account account = accountController.getAccountById(accountId);
        bankCard.setAccount(account);
        Long cardNumber = (long) (Math.random() * 100000000000000L);
        bankCard.setNumber("52" + cardNumber);
        try {
            bankCardRepository.save(bankCard);
        } catch (DataIntegrityViolationException ex) {
            throw dataIntegrityViolationExceptionHandler.handleException(ex);
        }
        return bankCard;
    }
}